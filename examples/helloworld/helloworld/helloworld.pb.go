// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	HelloBytes
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HelloBytes struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HelloBytes) Reset()                    { *m = HelloBytes{} }
func (m *HelloBytes) String() string            { return proto.CompactTextString(m) }
func (*HelloBytes) ProtoMessage()               {}
func (*HelloBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloBytes) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*HelloBytes)(nil), "helloworld.HelloBytes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHelloAgain(ctx context.Context, in *HelloBytes, opts ...grpc.CallOption) (*HelloBytes, error)
	// 服务器端流式 RPC
	ServerStream(ctx context.Context, in *HelloBytes, opts ...grpc.CallOption) (Greeter_ServerStreamClient, error)
	// 客户端流式 RPC
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamClient, error)
	// 双向流式 RPC
	ServerAndClientStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_ServerAndClientStreamClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloAgain(ctx context.Context, in *HelloBytes, opts ...grpc.CallOption) (*HelloBytes, error) {
	out := new(HelloBytes)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHelloAgain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ServerStream(ctx context.Context, in *HelloBytes, opts ...grpc.CallOption) (Greeter_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/helloworld.Greeter/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerStreamClient interface {
	Recv() (*HelloBytes, error)
	grpc.ClientStream
}

type greeterServerStreamClient struct {
	grpc.ClientStream
}

func (x *greeterServerStreamClient) Recv() (*HelloBytes, error) {
	m := new(HelloBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[1], c.cc, "/helloworld.Greeter/clientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientStreamClient{stream}
	return x, nil
}

type Greeter_ClientStreamClient interface {
	Send(*HelloBytes) error
	CloseAndRecv() (*HelloBytes, error)
	grpc.ClientStream
}

type greeterClientStreamClient struct {
	grpc.ClientStream
}

func (x *greeterClientStreamClient) Send(m *HelloBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientStreamClient) CloseAndRecv() (*HelloBytes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ServerAndClientStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_ServerAndClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[2], c.cc, "/helloworld.Greeter/ServerAndClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerAndClientStreamClient{stream}
	return x, nil
}

type Greeter_ServerAndClientStreamClient interface {
	Send(*HelloBytes) error
	Recv() (*HelloBytes, error)
	grpc.ClientStream
}

type greeterServerAndClientStreamClient struct {
	grpc.ClientStream
}

func (x *greeterServerAndClientStreamClient) Send(m *HelloBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterServerAndClientStreamClient) Recv() (*HelloBytes, error) {
	m := new(HelloBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHelloAgain(context.Context, *HelloBytes) (*HelloBytes, error)
	// 服务器端流式 RPC
	ServerStream(*HelloBytes, Greeter_ServerStreamServer) error
	// 客户端流式 RPC
	ClientStream(Greeter_ClientStreamServer) error
	// 双向流式 RPC
	ServerAndClientStream(Greeter_ServerAndClientStreamServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHelloAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHelloAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHelloAgain(ctx, req.(*HelloBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloBytes)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerStream(m, &greeterServerStreamServer{stream})
}

type Greeter_ServerStreamServer interface {
	Send(*HelloBytes) error
	grpc.ServerStream
}

type greeterServerStreamServer struct {
	grpc.ServerStream
}

func (x *greeterServerStreamServer) Send(m *HelloBytes) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientStream(&greeterClientStreamServer{stream})
}

type Greeter_ClientStreamServer interface {
	SendAndClose(*HelloBytes) error
	Recv() (*HelloBytes, error)
	grpc.ServerStream
}

type greeterClientStreamServer struct {
	grpc.ServerStream
}

func (x *greeterClientStreamServer) SendAndClose(m *HelloBytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientStreamServer) Recv() (*HelloBytes, error) {
	m := new(HelloBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_ServerAndClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ServerAndClientStream(&greeterServerAndClientStreamServer{stream})
}

type Greeter_ServerAndClientStreamServer interface {
	Send(*HelloBytes) error
	Recv() (*HelloBytes, error)
	grpc.ServerStream
}

type greeterServerAndClientStreamServer struct {
	grpc.ServerStream
}

func (x *greeterServerAndClientStreamServer) Send(m *HelloBytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterServerAndClientStreamServer) Recv() (*HelloBytes, error) {
	m := new(HelloBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayHelloAgain",
			Handler:    _Greeter_SayHelloAgain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Greeter_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _Greeter_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerAndClientStream",
			Handler:       _Greeter_ServerAndClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x3b, 0x4b, 0xc4, 0x40,
	0x14, 0x85, 0x77, 0x44, 0x5c, 0xbd, 0x44, 0x94, 0x0b, 0x4a, 0x58, 0x1b, 0x99, 0x42, 0xb6, 0x0a,
	0x41, 0x7b, 0x21, 0xb1, 0xd0, 0x46, 0x58, 0x36, 0x85, 0xf5, 0xb8, 0x7b, 0x89, 0x81, 0x49, 0x66,
	0xbc, 0x33, 0x3e, 0xf2, 0x7b, 0xfd, 0x23, 0x92, 0xd1, 0xc4, 0xe0, 0xa3, 0x50, 0xbb, 0xfb, 0xf8,
	0xce, 0xe1, 0x14, 0x07, 0xf6, 0xef, 0x48, 0x6b, 0xf3, 0x64, 0x58, 0xaf, 0x13, 0xcb, 0xc6, 0x1b,
	0x84, 0x8f, 0x8b, 0x94, 0x10, 0x5d, 0x75, 0xdb, 0x92, 0xee, 0x1f, 0xc8, 0x79, 0x44, 0xd8, 0x6c,
	0x54, 0x4d, 0xb1, 0x38, 0x16, 0xf3, 0x9d, 0x65, 0x98, 0xe5, 0x09, 0xc0, 0x3b, 0x63, 0x75, 0x8b,
	0x31, 0x4c, 0x6b, 0x72, 0x4e, 0x95, 0x3d, 0xd4, 0xaf, 0x03, 0x97, 0xb7, 0x9e, 0xdc, 0x67, 0x2e,
	0x1a, 0xb8, 0xd3, 0x97, 0x0d, 0x98, 0x5e, 0x32, 0x91, 0x27, 0xc6, 0x73, 0xd8, 0x2e, 0x54, 0x1b,
	0x64, 0x18, 0x27, 0xa3, 0xa8, 0xe3, 0x54, 0xb3, 0xc3, 0x6f, 0x3e, 0x56, 0xb7, 0x72, 0x82, 0x19,
	0xec, 0xf6, 0xfa, 0xac, 0x54, 0x55, 0x83, 0x5f, 0xd1, 0x10, 0x67, 0xf6, 0xc3, 0x5d, 0x4e, 0x30,
	0x87, 0xa8, 0x20, 0x7e, 0x24, 0x2e, 0x3c, 0x93, 0xaa, 0x7f, 0xef, 0x90, 0x8a, 0xce, 0x63, 0xa5,
	0x2b, 0x6a, 0xfc, 0x5f, 0x3d, 0xe6, 0x02, 0xaf, 0xe1, 0xe0, 0x2d, 0x47, 0xd6, 0xac, 0x2f, 0xfe,
	0x69, 0x96, 0x8a, 0x3c, 0x85, 0xa3, 0xca, 0x24, 0x25, 0xdb, 0x55, 0x42, 0xcf, 0xaa, 0xb6, 0x9a,
	0xdc, 0x88, 0xcf, 0xf7, 0x82, 0xe0, 0xa6, 0x9b, 0x17, 0x5d, 0x2b, 0x16, 0xe2, 0x76, 0x2b, 0xd4,
	0xe3, 0xec, 0x35, 0x00, 0x00, 0xff, 0xff, 0xad, 0x4f, 0xe2, 0x03, 0x32, 0x02, 0x00, 0x00,
}
